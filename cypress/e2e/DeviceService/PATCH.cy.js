/// <reference types="Cypress"/>

describe("PATCH/{id} successfully scenarios (Contract test)", () => {

    before(() => {
            cy.fixture('api/requestBodies/postBodyBefore.json').then((postBodyBefore) => {
            cy.log('Scenario to Create a device before the tests')
            cy.api({
                failOnStatusCode: false,
                method: 'POST',
                url: `${"/objects"}`,
                body: postBodyBefore
            }).then((response) => {
                expect(response.status).to.equal(200)
                Cypress.env('createdId', response.body.id)
            })
        })
    })

    it("Validate PATCH with success using new post id", () => {
        const id = Cypress.env('createdId');
        cy.fixture('api/requestBodies/patchBody.json').then((patchBody) => {
            cy.log('Using the new device id to send a request to Patch')
            cy.api({
                failOnStatusCode: false,
                method: 'PATCH',
                url: `${"/objects"}/${id}`,
                body: patchBody
            }).then((response) => {
                const item = response.body;
                // validate status code
                expect(response.status).equal(200)

                // validate the name param updated
                expect(item).to.have.property("name", "Apple MacBook Pro 16 (Updated Name)")
            })
        })
    })
})

describe("PATCH/{id} alternative scenarios (Business Test)", () => {
    it("Validate PATCH unauthorized for id 7", () => {
        cy.fixture('api/queryParams/getById.json').then((getById) => {
        cy.log('Sending a request to PATCH with id reserved = 7')
            const id = getById.id;
            cy.fixture('api/requestBodies/patchBody.json').then((patchBody) => {
                cy.api({
                    failOnStatusCode: false,
                    method: 'PATCH',
                    url: `${"/objects"}/${id}`,
                    body: patchBody
                }).then((response) => {
                    const item = response.body;

                    // validate status code
                    expect(response.status).equal(405)

                    // validate the error message from request
                    expect(item).to.have.property("error", "7 is a reserved id and the data object of it cannot be overridden. You can create a new object via POST request and use new generated by id from it to send a PATCH request.")
                })
            })
        })
    })

    it("Validate PATCH with an invalid id", () => {
        cy.fixture('api/queryParams/invalidId.json').then((invalidId) => {
            cy.log('Send an invalid id to PATCH request')
            const id = invalidId.id;
            cy.fixture('api/requestBodies/patchBody.json').then((patchBody) => {
                cy.log('Send a request to PATCH without id on url')
                cy.api({
                    failOnStatusCode: false,
                    method: 'PATCH',
                    url: `${"/objects"}/${id}`,
                    body: patchBody
                }).then((response) => {
                    const item = response.body;

                    // validate status code
                    expect(response.status).equal(404)

                    // validate the error message from request
                    expect(item).to.have.property("error", `The Object with id = ${id} doesn't exist. Please provide an object id which exists or generate a new Object using POST request and capture the id of it to use it as part of PATCH request after that.`)
                })
            })
        })
    })
})
